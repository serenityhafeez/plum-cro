/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/get-quote-form.js":
/*!*******************************!*\
  !*** ./src/get-quote-form.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const steps = document.querySelectorAll(\".form-block-wrapper\");\n    const nextButton = document.querySelector(\".next-get-quote\");\n    const backButton = document.querySelector(\".go-back-get-quote\");\n    const submitButton = document.querySelector(\".submit-get-quote\");\n\n    const freeEmailDomains = [\"gmail.com\", \"yahoo.com\", \"hotmail.com\", \"outlook.com\"];\n    const lastStepElements = document.querySelectorAll(\".last-step\");\n    const switchToBizElements = document.querySelectorAll(\".switch-to-biz\");\n\n    let currentStep = 0;\n    let isBusinessEmail = false;\n\n    // Function to validate a single field\n    function validateField(field) {\n        const errorMessage = field\n            .closest(\".form-input-holder\")\n            .querySelector(\".required-field\");\n\n        // For radio buttons\n        if (field.type === \"radio\") {\n            const radioGroup = field.closest(\".form-block-wrapper\").querySelectorAll(\n                `input[name=\"${field.name}\"]`\n            );\n            const isChecked = Array.from(radioGroup).some((radio) => radio.checked);\n\n            errorMessage.classList.toggle('visible', !isChecked);\n            return isChecked;\n        }\n        // For select fields\n        else if (field.tagName === \"SELECT\") {\n            const isEmpty = field.value.trim() === \"\";\n            errorMessage.classList.toggle('visible', isEmpty);\n            return !isEmpty;\n        }\n        // For standard input fields\n        else {\n            const isEmpty = !field.value.trim();\n            errorMessage.classList.toggle('visible', isEmpty);\n            return !isEmpty;\n        }\n    }\n\n    // Setup real-time validation listeners\n    function setupValidationListeners() {\n        steps.forEach(step => {\n            // Handle text and email inputs\n            const inputs = step.querySelectorAll('input[type=\"text\"], input[type=\"email\"]');\n            inputs.forEach(input => {\n                input.addEventListener('input', () => {\n                    if (input.value.trim()) {\n                        const errorMessage = input\n                            .closest(\".form-input-holder\")\n                            .querySelector(\".required-field\");\n                        errorMessage.classList.remove('visible');\n                    }\n                });\n            });\n\n            // Handle select inputs\n            const selects = step.querySelectorAll('select');\n            selects.forEach(select => {\n                select.addEventListener('change', () => {\n                    if (select.value.trim()) {\n                        const errorMessage = select\n                            .closest(\".form-input-holder\")\n                            .querySelector(\".required-field\");\n                        errorMessage.classList.remove('visible');\n                    }\n                });\n            });\n\n            // Handle radio buttons\n            const radioGroups = new Set();\n            const radioButtons = step.querySelectorAll('input[type=\"radio\"]');\n            radioButtons.forEach(radio => {\n                radioGroups.add(radio.name);\n            });\n\n            radioGroups.forEach(groupName => {\n                const radios = step.querySelectorAll(`input[type=\"radio\"][name=\"${groupName}\"]`);\n                radios.forEach(radio => {\n                    radio.addEventListener('change', () => {\n                        const errorMessage = radio\n                            .closest(\".form-input-holder\")\n                            .querySelector(\".required-field\");\n                        errorMessage.classList.remove('visible');\n                    });\n                });\n            });\n        });\n    }\n\n    // Validate all required fields in current step\n    function validateStep() {\n        const currentFormStep = steps[currentStep];\n        const requiredFields = currentFormStep.querySelectorAll(\"[required]\");\n        let isValid = true;\n\n        requiredFields.forEach((field) => {\n            const errorMessage = field\n                .closest(\".form-input-holder\")\n                .querySelector(\".required-field\");\n\n            // For radio buttons\n            if (field.type === \"radio\") {\n                const radioGroup = currentFormStep.querySelectorAll(\n                    `input[name=\"${field.name}\"]`\n                );\n                const isChecked = Array.from(radioGroup).some((radio) => radio.checked);\n\n                if (!isChecked) {\n                    errorMessage.classList.add('visible');\n                    isValid = false;\n                }\n            }\n            // For select fields\n            else if (field.tagName === \"SELECT\") {\n                if (field.value.trim() === \"\") {\n                    errorMessage.classList.add('visible');\n                    isValid = false;\n                }\n            }\n            // For standard input fields\n            else if (!field.value.trim()) {\n                errorMessage.classList.add('visible');\n                isValid = false;\n            }\n        });\n\n        return isValid;\n    }\n\n    function showStep(stepIndex) {\n        steps.forEach((step, index) => {\n            if (index === stepIndex) {\n                step.classList.remove('hidden');\n            } else {\n                step.classList.add('hidden');\n            }\n        });\n\n        backButton.classList.toggle(\"visible\", stepIndex > 0);\n\n        if (isBusinessEmail && stepIndex === 1) {\n            nextButton.style.display = \"none\";\n            submitButton.classList.add(\"visible\");\n        }\n        else if (!isBusinessEmail && stepIndex === steps.length - 1) {\n            nextButton.style.display = \"none\";\n            submitButton.classList.add(\"visible\");\n        }\n        else {\n            nextButton.style.display = \"inline-block\";\n            submitButton.classList.remove(\"visible\");\n        }\n    }\n\n    function markLastStepFieldsNil() {\n        const companyTypeSelect = document.getElementById(\"company-type\");\n        if (companyTypeSelect) {\n            if (!Array.from(companyTypeSelect.options).some(option => option.value === \"nil\")) {\n                const nilOption = document.createElement(\"option\");\n                nilOption.value = \"nil\";\n                nilOption.textContent = \"Nil\";\n                companyTypeSelect.appendChild(nilOption);\n            }\n            companyTypeSelect.value = \"nil\";\n        }\n\n        const nilRadio = document.querySelector('input[type=\"radio\"][value=\"nil\"]');\n        if (nilRadio) {\n            nilRadio.checked = true;\n        }\n\n        const industrySelect = document.getElementById(\"industry\");\n        if (industrySelect) {\n            if (!Array.from(industrySelect.options).some(option => option.value === \"nil\")) {\n                const nilOption = document.createElement(\"option\");\n                nilOption.value = \"nil\";\n                nilOption.textContent = \"Nil\";\n                industrySelect.appendChild(nilOption);\n            }\n            industrySelect.value = \"nil\";\n        }\n    }\n\n    function resetLastStepFields() {\n        const companyTypeSelect = document.getElementById(\"company-type\");\n        if (companyTypeSelect) {\n            const nilOption = companyTypeSelect.querySelector('option[value=\"nil\"]');\n            if (nilOption) {\n                nilOption.remove();\n            }\n            companyTypeSelect.value = \"\";\n        }\n\n        const nilRadio = document.querySelector('input[type=\"radio\"][value=\"nil\"]');\n        if (nilRadio) {\n            nilRadio.checked = false;\n        }\n\n        const industrySelect = document.getElementById(\"industry\");\n        if (industrySelect) {\n            const nilOption = industrySelect.querySelector('option[value=\"nil\"]');\n            if (nilOption) {\n                nilOption.remove();\n            }\n            industrySelect.value = \"\";\n        }\n    }\n\n    function handleEmailInput() {\n        const emailField = steps[0].querySelector(\"input[type='email']\");\n\n        emailField.addEventListener(\"input\", function () {\n            const emailValue = emailField.value.trim();\n            isBusinessEmail = !freeEmailDomains.includes(emailValue.split(\"@\")[1]);\n\n            if (isBusinessEmail) {\n                lastStepElements.forEach((el) => el.classList.add(\"remove\"));\n                switchToBizElements.forEach((el) => el.classList.remove(\"visible\"));\n            } else {\n                resetLastStepFields();\n                lastStepElements.forEach((el) => el.classList.remove(\"remove\"));\n                switchToBizElements.forEach((el) => el.classList.add(\"visible\"));\n            }\n        });\n    }\n\n    // Event listeners\n    nextButton.addEventListener(\"click\", function () {\n        if (validateStep()) {\n            if (currentStep === 0 && isBusinessEmail) {\n                markLastStepFieldsNil();\n            }\n\n            if (currentStep < steps.length - 1) {\n                currentStep++;\n                showStep(currentStep);\n            }\n        }\n    });\n\n    backButton.addEventListener(\"click\", function () {\n        if (currentStep > 0) {\n            currentStep--;\n            showStep(currentStep);\n        }\n    });\n\n    submitButton.addEventListener(\"click\", function () {\n        if (validateStep()) {\n            console.log(\"Form Submitted Successfully!\");\n        }\n    });\n\n    // Initialize form - ensure other steps start hidden\n    steps.forEach((step, index) => {\n        if (index > 0) {\n            step.classList.add('hidden');\n        }\n    });\n    handleEmailInput();\n    setupValidationListeners();\n});\n\n//# sourceURL=webpack://@finsweet/developer-starter/./src/get-quote-form.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/get-quote-form.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;