{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/glossary.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "let pollCount = 0;\nconst maxPolls = 4;\n\nconst updateGlossaryAnchors = () => {\n    const item_names = document.querySelectorAll('.glossary-h2');\n    const letters = [];\n    //console.log(\"SDK Loaded\");\n\n    item_names.forEach((item, index) => {\n        let name = item.innerHTML;\n        let first_char = name.charAt(0);\n\n        const letter_anchor = item.parentElement.parentElement.querySelector('.letter_anchor');\n        const hidden_letter = item.parentElement.parentElement.querySelector('.glossary-hidden-letter');\n\n        if (letter_anchor && hidden_letter) {\n            letter_anchor.setAttribute(\"id\", first_char);\n            hidden_letter.setAttribute(\"data-letter\", first_char);\n            hidden_letter.innerHTML = first_char;\n        }\n\n        if (letters.indexOf(first_char) === -1) {\n            letters.push(first_char);\n        }\n    });\n\n    // Letter Links\n    const alpha = Array.from(Array(26)).map((e, i) => i + 65);\n    const alphabet = alpha.map((x) => String.fromCharCode(x));\n    const links_wrap = document.getElementById('links_wrap');\n\n    // Clear existing links before reappending\n    links_wrap.innerHTML = '';\n\n    alphabet.forEach((letter_link, index) => {\n        let a = document.createElement(\"a\");\n        a.innerHTML = letter_link;\n        a.setAttribute(\"class\", 'term-link');\n\n        if (letters.includes(letter_link)) {\n            a.setAttribute(\"href\", '#' + letter_link);\n        }\n\n        links_wrap.appendChild(a);\n    });\n\n    // Show Letter headlines for each group\n    const elementArray = document.getElementsByClassName(\"glossary-hidden-letter\");\n    const usedLetters = new Set([]);\n\n    for (let i = 0; i < elementArray.length; i++) {\n        const letter = elementArray[i].getAttribute(\"data-letter\");\n\n        if (usedLetters.has(letter) === false) {\n            usedLetters.add(letter);\n            createLetterLink(elementArray[i]);\n        }\n    }\n\n    // Call this function to handle checkboxes\n    handleCheckboxChange();\n\n    // Ensure new glossary-hidden-letter elements are hidden if the checkbox is already checked\n    applyCheckboxState();\n}\n\n// Create separation (without g-spacer)\nfunction createLetterLink(element) {\n    element.classList.add('glossary-letter');\n}\n\n// Function to handle checkbox behavior (for glossary-hidden-letter)\nfunction handleCheckboxChange() {\n    const checkboxes = document.querySelectorAll('[id^=\"Checkbox-3\"]');\n\n    checkboxes.forEach((checkbox) => {\n        checkbox.addEventListener('change', function () {\n            if (checkbox.checked) {\n                hideGlossaryLetters();\n            } else {\n                showGlossaryLetters();\n            }\n        });\n    });\n}\n\n// Function to hide all glossary-hidden-letter elements\nfunction hideGlossaryLetters() {\n    const hiddenLetters = document.querySelectorAll('.glossary-hidden-letter');\n    hiddenLetters.forEach((element) => {\n        element.style.display = 'none';\n    });\n}\n\n// Function to show all glossary-hidden-letter elements\nfunction showGlossaryLetters() {\n    const hiddenLetters = document.querySelectorAll('.glossary-hidden-letter');\n    hiddenLetters.forEach((element) => {\n        element.style.display = '';\n    });\n}\n\n// Function to apply checkbox state to all glossary-hidden-letter elements\nfunction applyCheckboxState() {\n    const checkboxes = document.querySelectorAll('#checkbox-3');\n    checkboxes.forEach((checkbox) => {\n        if (checkbox.checked) {\n            hideGlossaryLetters();\n        }\n    });\n}\n\n// // Polling mechanism to run only twice\n// const pollInterval = setInterval(() => {\n//     if (pollCount < maxPolls) {\n//         updateGlossaryAnchors();\n//         pollCount++;\n//     } else {\n//         clearInterval(pollInterval);\n//     }\n// }, 1000); // Polling interval (5 seconds)\n\n\nconst pollInterval = setInterval(() => {\n    // Function to check if a term-link with href \"#A\", \"#B\", or \"#C\" is loaded\n    function isTermLinkLoaded() {\n        return document.querySelector('.term-link[href=\"#Z\"]') ||\n            document.querySelector('.term-link[href=\"#Y\"]') ||\n            document.querySelector('.term-link[href=\"#X\"]');\n    }\n\n    // If any of the term-links is loaded, stop polling\n    if (isTermLinkLoaded()) {\n        clearInterval(pollInterval);\n        // console.log(\"Polling stopped as term-link Z, Y, or X is loaded.\");\n    } else {\n        // Perform your glossary update function\n        updateGlossaryAnchors();\n        //console.log(\"Polling... waiting for term-links Z, Y, or X.\");\n    }\n}, 1000); // Polling interval of 1 second\n\n// Helper function to get the current day of the year\nfunction getDayOfYear() {\n    const now = new Date();\n    const start = new Date(now.getFullYear(), 0, 0);\n    const diff = now - start;\n    const oneDay = 1000 * 60 * 60 * 24;\n    const dayOfYear = Math.floor(diff / oneDay);\n    //console.log(\"Current day of the year:\", dayOfYear); // Log the day of the year\n    return dayOfYear;\n}\n\n// Main function to show one item based on the day of the year\nfunction showDailyItem() {\n    const items = document.querySelectorAll('.wod-item-cms'); // Select your CMS items based on your structure\n    const totalItems = items.length;\n\n    // Log the total number of items\n    // console.log(\"Total number of items:\", totalItems);\n\n    // Get the current day of the year and map it to an item index\n    const dayOfYear = getDayOfYear();\n    // const itemToShow = dayOfYear % totalItems; // Ensure it loops if items > 365\n    const itemToShow = 2; // Ensure it loops if items > 365\n    // Log which item index will be shown\n    //console.log(\"Item to show for today (index):\", itemToShow);\n\n    // Hide all items except the one to show for the day\n    items.forEach((item, index) => {\n        if (index === itemToShow) {\n            item.style.display = 'block'; // Show the specific item for the day\n            //console.log(\"Showing item at index:\", index);\n        } else {\n            item.style.display = 'none'; // Hide all others\n            //  console.log(\"Hiding item at index:\", index);\n        }\n    });\n}\n// Run the function when the DOM is loaded\ndocument.addEventListener('DOMContentLoaded', showDailyItem);\n\nfunction truncateTextBasedOnScreen() {\n    // Helper function to truncate text based on max length\n    function truncateText(element, maxLength) {\n        const text = element.textContent;\n\n        if (text.length > maxLength) {\n            const truncatedText = text.substring(0, maxLength) + ' ...';\n            element.textContent = truncatedText;\n            console.log(`Truncated text: \"${truncatedText}\"`);\n        }\n    }\n\n    // Function to handle truncation based on screen size\n    function handleTruncate() {\n        const elements = document.querySelectorAll('._14px-glossary');\n        const isMobile = window.innerWidth <= 768; // Adjust this breakpoint as needed\n\n        // Set character limits based on screen size\n        const maxLength = isMobile ? 170 : 243;\n\n        // Truncate text for each element with class '14px-glossary'\n        elements.forEach(element => truncateText(element, maxLength));\n    }\n\n    // Run on page load\n    document.addEventListener('DOMContentLoaded', handleTruncate);\n\n    // Run on window resize\n    window.addEventListener('resize', handleTruncate);\n}\n\n// Call the function to start truncating text\ntruncateTextBasedOnScreen();\n\n// Initial update\nupdateGlossaryAnchors();\n"],
  "mappings": "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",
  "names": []
}
